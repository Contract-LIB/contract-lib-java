/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java-library'
    id 'antlr'
    id 'maven-publish'
    id 'org.xbib.gradle.plugin.jflex' version '3.0.2'
}

repositories {
    mavenCentral()
}

configurations { antlr4 }

sourceSets {
    main {
        java {
            srcDir "$buildDir/generated-src/antlr4/main/"
            srcDir "$buildDir/generated-src/jflex/main/"
        }
    }
}

dependencies {
    api 'org.antlr:antlr4:4.13.2'
    antlr4 'org.antlr:antlr4:4.13.2'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

group = 'org.contractlib'
version = '0.1-SNAPSHOT'
description = 'Contract-LIB'
java.sourceCompatibility = JavaVersion.VERSION_21

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

def antlr4Output = "$buildDir/generated-src/antlr4/main/org/contractlib/antlr4parser"
tasks.register('runAntlr4', JavaExec) {
    //see incremental task api, prevents rerun if nothing has changed.
    inputs.files "src/main/antlr4/ContractLIB.g4"
    outputs.dir antlr4Output
    classpath = configurations.antlr4
    mainClass.set("org.antlr.v4.Tool")
    args = ["-visitor",
            "-Xexact-output-dir", "-o", antlr4Output,
            "-package", "org.contractlib.antlr4parser",
            "src/main/antlr4/ContractLIB.g4"]
    doFirst {
        file(antlr4Output).mkdirs()
        println("create $antlr4Output")
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

compileJava.dependsOn runAntlr4

tasks.withType(Javadoc).configureEach {
    options.encoding = 'UTF-8'
}

sourcesJar.dependsOn generateGrammarSource
sourcesJar.dependsOn runAntlr4
afterEvaluate {
    // this needs to be done in afterEvaluate, otherwise "generateJflex" is unknown
    compileJava.dependsOn generateJflex
    sourcesJar.dependsOn generateJflex

    // workaround: there is no public property to set the output in the extension, we need to directly refer to the
    // task instead
    tasks.named('generateJflex').configure {
        target = file("$buildDir/generated-src/jflex/main")
    }
}
